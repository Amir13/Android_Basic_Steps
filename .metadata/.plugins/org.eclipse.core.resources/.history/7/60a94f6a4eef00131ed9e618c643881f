package course.android.canvas;

import java.util.Random;

import com.course.android.R;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.os.Bundle;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.View;
import android.widget.RelativeLayout;

public class SimpleCanvas extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_simple_canvas);

		final RelativeLayout layout = (RelativeLayout) findViewById(R.id.simple_canvas);
		final Bitmap bitmap = BitmapFactory.decodeResource(getResources(),
				R.drawable.b128);
		final MyImageView view = new MyImageView(getApplicationContext(),
				bitmap);

		layout.addView(view);

		new Thread(new Runnable() {

			@Override
			public void run() {
				while (view.move()) {
					view.postInvalidate();

					try {
						Thread.sleep(100);
					} catch (InterruptedException e) {
						Log.e("SimpleCanvas", e.getMessage());
					}
				}
			}
		}).start();

	}

	private class MyImageView extends View {

		final private static int STEP = 100;
		final private Bitmap mBitmap;

		private MyCoords mCurrent;
		final private MyCoords coords;

		final private DisplayMetrics metrics;
		final private int width;
		final private int height;
		final private int bitmapDimesions;
		final private int bitmapDimesionsAdj;

		final private Paint paint = new Paint();

		public MyImageView(Context context, Bitmap bitmap) {
			super(context);

			bitmapDimesions = (int) getResources().getDimension(
					R.dimen.canvas_height);
			this.mBitmap = Bitmap.createScaledBitmap(bitmap, bitmapDimesions,
					bitmapDimesions, false);
			bitmapDimesionsAdj = bitmapDimesions + 20;

			metrics = new DisplayMetrics();
			SimpleCanvas.this.getWindowManager().getDefaultDisplay()
					.getMetrics(metrics);

			width = metrics.widthPixels;
			height = metrics.heightPixels;

			Random r = new Random();
			float x = (float) r.nextInt(width);
			float y = (float) r.nextInt(height);
			mCurrent = new MyCoords(x, y);

			float dy = (float) r.nextInt(height / height);
			dy *= r.nextInt(2) == 1 ? STEP : -1 * STEP;
			float dx = (float) r.nextInt(width / width);
			dx *= r.nextInt(2) == 1 ? STEP : -1 * STEP;

			coords = new MyCoords(dx, dy);

			paint.setAntiAlias(true);
		}

		@Override
		protected void onDraw(Canvas canvas) {
			MyCoords tmp = mCurrent.getCoords();
			canvas.drawBitmap(mBitmap, tmp.x, tmp.y, paint);
		}

		protected boolean move() {
			mCurrent = mCurrent.move(coords);

			if (mCurrent.y < 0 - bitmapDimesionsAdj
					|| mCurrent.y > height + bitmapDimesionsAdj
					|| mCurrent.x < 0 - bitmapDimesionsAdj
					|| mCurrent.x > width + bitmapDimesionsAdj) {
				return false;
			} else {
				return true;
			}
		}

	}

}
