package course.android.course.network;

import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

import com.course.android.R;

import android.app.Activity;
import android.net.http.AndroidHttpClient;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;

public class NetworkXml extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		// setContentView(R.layout.activity_http_result);
		new HttpRequestXml().execute();
	}

	private class HttpRequestXml extends AsyncTask<Void, Void, List<String>> {

		private static final String USER_NAME = "aporter";

		private static final String URL = "http://api.geonames.org/earthquakes?north=44.1&south=-9.9&east=-22.4&west=55.2&username="
				+ USER_NAME;

		AndroidHttpClient client = AndroidHttpClient.newInstance("userAgent");

		@Override
		protected List<String> doInBackground(Void... arg0) {

			HttpGet request = new HttpGet(URL);
			XMLResponseHandler responseHandler = new XMLResponseHandler();

			try {
				return client.execute(request, responseHandler);
			} catch (ClientProtocolException e) {
				Log.e("HttpRequestXml", e.getMessage());
			} catch (IOException e) {
				Log.e("HttpRequestXml", e.getMessage());
			}
			
			return null;
		}

		protected void onPostExecute(List<String> result) {

		}

	}

	private class XMLResponseHandler implements ResponseHandler<List<String>> {

		private static final String MAGNITUDE_TAG = "magnitude";
		private static final String LONGITUDE_TAG = "lng";
		private static final String LATITUDE_TAG = "lat";
		private String mLat, mLng, mMag;
		private boolean mIsParsingLat, mIsParsingLng, mIsParsingMag;
		private final List<String> mResults = new ArrayList<String>();

		@Override
		public List<String> handleResponse(HttpResponse httpResp)
				throws ClientProtocolException, IOException {

			// Create the Pull Parser
			XmlPullParserFactory factory;
			try {
				factory = XmlPullParserFactory.newInstance();
				XmlPullParser parser = factory.newPullParser();

				// Set the Parser's input to be the XML document in the HTTP
				// Response
				parser.setInput(new InputStreamReader(httpResp.getEntity()
						.getContent()));

				// Get the first Parser event and start iterating over the XML
				// document
				int eventType = parser.getEventType();

				while (eventType != XmlPullParser.END_DOCUMENT) {
					if (eventType == XmlPullParser.START_TAG) {
						startTag(parser.getName());
					} else if (eventType == XmlPullParser.END_TAG) {
						endTag(parser.getName());
					}
					if (eventType == XmlPullParser.TEXT) {
						text(parser.getName());
					}

					eventType = parser.next();
				}
				return mResults;
			} catch (XmlPullParserException e) {
				Log.e("XMLResponseHandler", e.getMessage());
			}

			return null;
		}

		private void startTag(String localName) {
			if (localName.equals(LATITUDE_TAG)) {
				mIsParsingLat = true;
			} else if (localName.equals(LONGITUDE_TAG)) {
				mIsParsingLng = true;
			} else if (localName.equals(MAGNITUDE_TAG)) {
				mIsParsingMag = true;
			}
		}

		public void endTag(String localName) {
			if (localName.equals(LATITUDE_TAG)) {
				mIsParsingLat = false;
			} else if (localName.equals(LONGITUDE_TAG)) {
				mIsParsingLng = false;
			} else if (localName.equals(MAGNITUDE_TAG)) {
				mIsParsingMag = false;
			} else if (localName.equals("earthquake")) {
				mResults.add(MAGNITUDE_TAG + ":" + mMag + "," + LATITUDE_TAG
						+ ":" + mLat + "," + LONGITUDE_TAG + ":" + mLng);
				mLat = null;
				mLng = null;
				mMag = null;
			}
		}

		public void text(String text) {
			if (mIsParsingLat) {
				mLat = text.trim();
			} else if (mIsParsingLng) {
				mLng = text.trim();
			} else if (mIsParsingMag) {
				mMag = text.trim();
			}
		}

	}

}
