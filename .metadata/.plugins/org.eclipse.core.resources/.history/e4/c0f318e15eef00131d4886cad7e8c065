package course.android.canvas;

import java.util.Random;

import com.course.android.R;

import course.examples.Graphics.CanvasBubbleSurfaceView.BubbleActivity.BubbleView;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.os.Bundle;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.widget.RelativeLayout;

public class MySurface extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_simple_canvas);

		RelativeLayout relativeLayout = (RelativeLayout) findViewById(R.id.simple_canvas);
		final MyView view = new MyView(getApplicationContext(),
				BitmapFactory.decodeResource(getResources(), R.drawable.b128));

		relativeLayout.addView(view);
	}

	private class MyView extends SurfaceView implements SurfaceHolder.Callback {

		private final Bitmap bitmap;
		private final int dimensions, dimensionsAdj;
		private final DisplayMetrics displayMetrics;
		private final int width, height;
		private float mX, mY, mDx, mDy, rotation;
		private final SurfaceHolder surfaceHolder;
		private final Paint painter = new Paint();
		private Thread mDrawingThread;

		private static final int MOVE_STEP = 1;
		private static final float ROT_STEP = 1.0f;

		public MyView(Context context, Bitmap bitmap) {
			super(context);

			dimensions = (int) getResources().getDimension(
					R.dimen.canvas_height);
			bitmap = Bitmap.createScaledBitmap(bitmap, dimensions, dimensions, false);
			
			dimensionsAdj = dimensions /2;
			
			displayMetrics = new DisplayMetrics();
			MySurface.this.getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
			
			width = displayMetrics.widthPixels;
			height = displayMetrics.heightPixels;
			
			Random r = new Random();
			mX = (float) r.nextInt(height);
			mY = (float) r.nextInt(width);
			mDx= (float) r.nextInt(height) / height;
			mDx *= r.nextInt(2) == 1? MOVE_STEP:-1*MOVE_STEP ; 
			mDy= (float) r.nextInt(width) / width;
			mDy *= r.nextInt(2) == 1? MOVE_STEP:-1*MOVE_STEP ;
			rotation = 1.0f;
			
			painter.setAntiAlias(true);
			
			surfaceHolder = getHolder();
			surfaceHolder.addCallback(this);
		}
		
		private void drawBubble(Canvas canvas) {
			canvas.drawColor(Color.DKGRAY);
			rotation += ROT_STEP;
			canvas.rotate(rotation, mY + dimensionsAdj, mX
					+ dimensionsAdj);
			canvas.drawBitmap(bitmap, mY, mX, painter);
		}

		private boolean move() {
			mX += mDx;
			mY += mDy;
			if (mX < 0 - mBitmapHeightAndWidth
					|| mX > mDisplayHeight + mBitmapHeightAndWidth
					|| mY < 0 - mBitmapHeightAndWidth
					|| mY > mDisplayWidth + mBitmapHeightAndWidth) {
				return false;
			} else {
				return true;
			}
		}

		@Override
		public void surfaceChanged(SurfaceHolder holder, int format, int width,
				int height) {
			// TODO Auto-generated method stub

		}

		@Override
		public void surfaceCreated(SurfaceHolder holder) {
			// TODO Auto-generated method stub

		}

		@Override
		public void surfaceDestroyed(SurfaceHolder holder) {
			// TODO Auto-generated method stub

		}

	}

}
