package com.android.course.touch;

import java.util.ArrayList;
import java.util.Random;

import com.android.course.main.R;

import android.app.Activity;
import android.gesture.Gesture;
import android.gesture.GestureLibraries;
import android.gesture.GestureLibrary;
import android.gesture.GestureOverlayView;
import android.gesture.GestureOverlayView.OnGesturePerformedListener;
import android.gesture.Prediction;
import android.graphics.Color;
import android.os.Bundle;
import android.widget.FrameLayout;
import android.widget.RelativeLayout;

public class GestureBuilderActivity extends Activity implements OnGesturePerformedListener {

	private FrameLayout frame;
	private int bgColor = 0;
	private int firstColor, startColor = Color.GRAY;
	private GestureLibrary library;
	private RelativeLayout relativeLayout;

	private static final String PAL = "Pal";
	private static final String ROD = "Rod";
	private static final String SYMBOL = "Symbol";
	private static final String SYMBOLX = "SymbolX";
	private static final String INFINITE = "Infinite";
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_gesture_builder);

		frame = (FrameLayout) findViewById(R.id.frame);
		firstColor = bgColor = new Random().nextInt(0xFFFFFF) | 0xFF000000;
		frame.setBackgroundColor(startColor);

		relativeLayout = (RelativeLayout) findViewById(R.id.main_layout);
		relativeLayout.setBackgroundColor(startColor);

		 library = GestureLibraries.fromRawResource(this, R.raw.gestures);
		if (!library.load()) {
			finish();
		}

		// Make this the target of gesture detection callbacks
		GestureOverlayView gestureView = (GestureOverlayView) findViewById(R.id.overlay);
		gestureView.addOnGesturePerformedListener(this);

	}

	@Override
	public void onGesturePerformed(GestureOverlayView arg0, Gesture gesture) {

		// Get gesture predictions
		ArrayList<Prediction> predictionList = library.recognize(gesture);
		
		// Get highest-ranked prediction
		if(predictionList.size() > 0){
			Prediction prediction = predictionList.get(0);
			
			// Ignore weak predictions
			if(prediction.score > 2.0){
				if (prediction.name.equals(arg0)) {
					
				} else {

				}
				
				
			}

		}
		
	}

}
