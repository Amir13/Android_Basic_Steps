package com.android.course.viewelement;

import android.app.Activity;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Color;
import android.net.Uri;
import android.os.BatteryManager;
import android.os.Bundle;
import android.view.Gravity;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.RemoteViews;
import android.widget.TextView;
import android.widget.Toast;

import com.android.course.broadcast.ReceiverOne;
import com.android.course.notification.NotificationSecondActivity;
import com.android.course.thread.AsyncActivity;
import com.android.course.thread.SimpleThreadActivity;

public class MainActivity extends Activity {

	// Notification
	private Intent secondIntent;
	private PendingIntent pendingIntent;
	private int notificationCounter;
	private int notificationCounter2;
	@SuppressWarnings("unused")
	private Uri soundUri = Uri
			.parse("android.resource://com.android.course.viewelement/"
					+ R.raw.alarm_rooster);
	private Uri soundUri2 = Uri
			.parse("android.resource://com.android.course.viewelement/"
					+ R.raw.do_it);
	private long[] vibratePattern = { 0, 200, 200, 300 };
	private RemoteViews remoteView = new RemoteViews(
			"com.android.course.viewelement", R.layout.custom_toast);
	// Notification ID to allow for future updates
	private static final int NOTIFICATION_ID = 1;
	private static final int CUSTOM_NOTIFICATION_ID = 2;

	// Broadcast
	private static final String INTENT_IDENTIFIER = "my.intent.identifier";

	// BroadcastReceiver compound
	private static final String INTENT_ORDERED = "my.intent.compound";
	private final ReceiverOne receiverOne = new ReceiverOne();

	// BroadcastReceiver compound order
	private static final String INTENT_COMPOUND_ORDER = "intent.compound.order";
	private final ReceiverOne compoundReceiverOne = new ReceiverOne();

	// Broadcast Receiver to Collect Data
	private static final String INTENT_COMPOUND_ORDER_DATA = "intent.compound.order.collect.data";

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		// Customized Toast
		createToast();

		// Notification
		createNotification();

		// Custom Notification
		createCustomNotification();

		// Broadcast static registration
		broadcastStaticRegistration();

		// Compound Broadcast Receiver with static registration
		broadcastCompound();

		// BroadcastReceiver in compound order
		broadcastCompoundOrder();

		// BroadcastReceiver to Collect Data
		broadcastCollectData();

		// Sticky BroadcastReceiver
		stickyBroadcast();

		// Simple Thread
		simpleThread();

		// AsyncTask
		asynctask();

		// Handler that use Runables
		handlerRunnable();

		// Handler that use Messages
		handlerMessage();

	}

	private void createToast() {
		// Customized Toast
		Button buttonToast = (Button) findViewById(R.id.buttonToast);

		buttonToast.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				Toast toast = new Toast(getApplicationContext());
				toast.setGravity(Gravity.CENTER_HORIZONTAL, 0, 0);
				toast.setDuration(Toast.LENGTH_SHORT);
				toast.setView(getLayoutInflater().inflate(
						R.layout.custom_toast, null));
				toast.show();
			}
		});

	}

	private void createNotification() {
		secondIntent = new Intent(getApplicationContext(),
				NotificationSecondActivity.class);
		pendingIntent = PendingIntent.getActivity(getApplicationContext(), 0,
				secondIntent, Intent.FLAG_ACTIVITY_NEW_TASK);

		Button buttonNotification = (Button) findViewById(R.id.buttonNotification);
		buttonNotification.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				Notification.Builder notificationBuilder = new Notification.Builder(
						getApplicationContext());
				notificationBuilder
						.setTicker("This is the Notification Message");
				notificationBuilder
						.setSmallIcon(android.R.drawable.btn_star_big_on);
				notificationBuilder.setAutoCancel(true);
				notificationBuilder.setContentTitle("Notification Title");
				notificationBuilder.setContentText("You've been notified : ("
						+ ++notificationCounter + ")");
				notificationBuilder.setContentIntent(pendingIntent);
				// notificationBuilder.setSound(soundUri);
				notificationBuilder.setLights(Color.RED, 3000, 3000);
				notificationBuilder.setVibrate(vibratePattern);

				NotificationManager nm = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
				nm.notify(NOTIFICATION_ID, notificationBuilder.build());
			}
		});

	}

	private void createCustomNotification() {
		secondIntent = new Intent(getApplicationContext(),
				NotificationSecondActivity.class);
		pendingIntent = PendingIntent.getActivity(getApplicationContext(), 0,
				secondIntent, Intent.FLAG_ACTIVITY_NEW_TASK);

		Button buttonNotification = (Button) findViewById(R.id.buttonCustomNotification);
		buttonNotification.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {

				remoteView.setTextViewText(R.id.textView1,
						getString(R.string.message) + "("
								+ ++notificationCounter + ")");

				Notification.Builder notificationBuilder = new Notification.Builder(
						getApplicationContext());
				notificationBuilder
						.setTicker("This is the Notification Message");
				notificationBuilder
						.setSmallIcon(android.R.drawable.btn_star_big_off);
				notificationBuilder.setAutoCancel(true);
				notificationBuilder.setContentTitle("Notification Title");
				notificationBuilder.setContentText("You've been notified : ("
						+ ++notificationCounter2 + ")");
				notificationBuilder.setContentIntent(pendingIntent);
				notificationBuilder.setSound(soundUri2);
				notificationBuilder.setLights(Color.RED, 3000, 3000);
				notificationBuilder.setVibrate(vibratePattern);
				notificationBuilder.setContent(remoteView);

				NotificationManager nm = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
				nm.notify(CUSTOM_NOTIFICATION_ID, notificationBuilder.build());
			}
		});

	}

	private void broadcastStaticRegistration() {

		Button buttonStatic = (Button) findViewById(R.id.buttonBroadcastSingle);
		buttonStatic.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				sendBroadcast(new Intent(INTENT_IDENTIFIER),
						android.Manifest.permission.VIBRATE);
			}
		});

	}

	private void broadcastCompound() {

		registerReceiver(receiverOne, new IntentFilter(INTENT_ORDERED));

		Button buttonOrder = (Button) findViewById(R.id.buttonBrOrder);
		buttonOrder.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				sendBroadcast(new Intent(INTENT_ORDERED),
						android.Manifest.permission.VIBRATE);
			}
		});
	}

	private void broadcastCompoundOrder() {

		IntentFilter intentFilter = new IntentFilter(INTENT_COMPOUND_ORDER);
		intentFilter.setPriority(4);

		registerReceiver(compoundReceiverOne, intentFilter);

		Button buttonOrder = (Button) findViewById(R.id.buttonBrCompoundOrder);
		buttonOrder.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				sendOrderedBroadcast(new Intent(INTENT_COMPOUND_ORDER),
						android.Manifest.permission.VIBRATE);
			}
		});
	}

	private void broadcastCollectData() {

		Button buttonOrder = (Button) findViewById(R.id.buttonBrCollectData);
		buttonOrder.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				sendOrderedBroadcast(new Intent(INTENT_COMPOUND_ORDER_DATA),
						null, new BroadcastReceiver() {

							@Override
							public void onReceive(Context context, Intent arg1) {
								Toast.makeText(context,
										"getResultData() : " + getResultData(),
										Toast.LENGTH_LONG).show();
							}
						}, null, 0, null, null);
			}
		});
	}

	private void stickyBroadcast() {

		final TextView currentStateView = (TextView) findViewById(R.id.textViewBr);
		final String message = "The status message will change when the battery level changes."
				+ System.getProperty("line.separator");

		registerReceiver(new BroadcastReceiver() {

			@Override
			public void onReceive(Context arg0, Intent intent) {
				if (intent.getAction().equals(Intent.ACTION_BATTERY_CHANGED)) {
					//
					String batteryMessage = "Status: Recent Intent activity";
					if (isInitialStickyBroadcast()) {
						batteryMessage = "Status: Not recent Intent activity";
					}

					currentStateView.setText(message
							+ System.getProperty("line.separator")
							+ batteryMessage
							+ " Current Battery level :"
							+ String.valueOf(intent.getIntExtra(
									BatteryManager.EXTRA_LEVEL, -1)));
				}
			}
		}, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
	}

	private void simpleThread() {

		Button button = (Button) findViewById(R.id.buttonSimpleThread);
		button.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				Intent intent = new Intent(getApplicationContext(),
						SimpleThreadActivity.class);
				startActivity(intent);
			}
		});

	}

	private void asynctask() {

		Button button = (Button) findViewById(R.id.buttonAsync);
		button.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				Intent intent = new Intent(getApplicationContext(),
						AsyncActivity.class);
				startActivity(intent);
			}
		});

	}

	private void handlerRunnable() {

	}

	private void handlerMessage() {

	}

	@Override
	protected void onDestroy() {
		unregisterReceiver(receiverOne);
		unregisterReceiver(compoundReceiverOne);

		super.onDestroy();
	}
}
